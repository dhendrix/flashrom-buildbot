# (Almost) everything the various scripts need to know about.
# There is still some potential for unification.

# The script tries to ssh into VMs. Use the following user name to do so:
vm_user="flashrom"
# Create any intermediate files within this directory:
vm_workdir="/tmp/buildbot"
# Where to put the result files...
www_root="/home/${vm_user}/public_html/buildbot.flashrom.org/buildresults"
# Directory containing the to-be-linked libraries built for the various toolchains in subdirs
libs_base="/home/${vm_user}/cross-libs"

# an associative array/map of compiler nicknames and the respective binary
declare -A available_compilers=(
				[aarch64]=aarch64-linux-gnu-gcc
				[alpha]=alphaev4-unknown-linux-gnu-gcc
				[android-clang]="x86_64-linux-android-clang --sysroot /opt/cross/x86_64-androideabi-linux-bionic-clang/sysroot/"
				[android]=x86_64-linux-android-gcc
				[arm]=arm-linux-gnueabihf-gcc
				[centos-4-amd64-gcc]=gcc
				[debian-7-amd64-gcc]=gcc
				[debian-7-amd64-kfreebsd-gcc]=gcc
				[debian-8-amd64-kfreebsd-gcc]=gcc
				[debian-8-amd64-gcc]=gcc
				[debian_hurd-i386-gcc]=gcc
				[dos]=i586-pc-msdosdjgpp-gcc
				[dragonflybsd-4.0-amd64-gcc]=gcc
				[fedora-21-amd64-gcc]=gcc
				[fedora-23-amd64-gcc]=gcc
#				[freebsd-10-amd64-clang]=clang # requires support for handling multiple compilers per vm
				[freebsd-10-amd64-gcc]=gcc48
# loves to go into reboot loops [freebsd-10-i386-gcc]=gcc48
				[hppa]=hppa-linux-gnu-gcc
				[libpayload]="CC=/home/flashrom/coreboot/util/crossgcc/xgcc/bin/i386-elf-gcc /home/flashrom/coreboot/payloads/libpayload/bin/lpgcc"
				[m68k]=m68k-linux-gnu-gcc-5
				[mips64el]="mips-unknown-linux-gnu-gcc -march=mips64 -LE"
				[mips64]="mips-unknown-linux-gnu-gcc -march=mips64 -EB"
				[mipsel]="mips-unknown-linux-gnu-gcc -march=mips32 -LE"
				[mips]="mips-unknown-linux-gnu-gcc -march=mips32 -EB"
				[netbsd-6.1-i386-gcc]=gcc
				[omnios-amd64-gcc]=/opt/gcc-4.8.1/bin/gcc
				[openbsd-5.6-i386-gcc]=gcc
				[openbsd-5.8-amd64-gcc]=gcc
				[osx-clang64]=x86_64-apple-darwin15-clang
				[ppc64le]=powerpc64le-linux-gnu-gcc
				[ppc]=powerpc-linux-gnu-gcc
				[s390x]=s390x-ibm-linux-gnu-gcc
				[sh4]=sh4-linux-gnu-gcc-5
# kaputt.			[solaris]
# no (impl. sync primitives)	[sparc7]="sparc-unknown-linux-gnu-gcc -m32 -mcpu=v7"
				[sparc8]="sparc-unknown-linux-gnu-gcc -m32 -mcpu=v8"
				[sparc9]="sparc-unknown-linux-gnu-gcc -m32 -mcpu=v9"
# gcc broken on SPARC64		[sparc64]="sparc-unknown-linux-gnu-gcc -m64"
				[ubuntu-15.10-amd64-clang]=clang
				[ubuntu-15.10-amd64-musl]="x86_64-unknown-linux-musl-gcc"
				[ubuntu-15.10-amd64-uclibc]="x86_64-unknown-linux-uclibc-gcc"
				[ubuntu-15.10-amd64-gcc32]="gcc -m32"
				[ubuntu-15.10-amd64-gcc64]="gcc -m64"
# not as trivial as it should be[ubuntu-15.10-amd64-gccx32]="gcc -mx32"
				[amd64-linux-ancientlibs]="gcc -m64"
# 				[win32-libusb0]=i686-w64-mingw32-gcc
				[win32]=i686-w64-mingw32-gcc
				[win64]=x86_64-w64-mingw32-gcc
			)

# Mapping between compiler keys and their default make arguments.
# This allows to have a working default build by disabling some know-bad configurations.
# For example, there is no libusb1 for omnios hence we set CONFIG_ENABLE_LIBUSB1_PROGRAMMERS=no
# These default parameters are only applied if the user does not supply any.
declare -A default_args=(
				[android-clang]="CONFIG_ENABLE_LIBPCI_PROGRAMMERS=no"
				[android]="CONFIG_ENABLE_LIBPCI_PROGRAMMERS=no"
				[centos-4-amd64-gcc]="CONFIG_ENABLE_LIBUSB1_PROGRAMMERS=no"
				[debian_hurd-i386-gcc]="CONFIG_ENABLE_LIBUSB1_PROGRAMMERS=no"
				[omnios-amd64-gcc]="CONFIG_ENABLE_LIBUSB1_PROGRAMMERS=no CONFIG_ENABLE_LIBUSB0_PROGRAMMERS=no"
		)

# another map storing the names of virtual box machines for any compiler nick name to be run in a vbox vm
declare -A vbox_names=(
			[centos-4-amd64-gcc]=centos-4-amd64
			[debian-7-amd64-gcc]=debian-7-amd64
			[debian_hurd-i386-gcc]=debian_hurd-i386
			[debian-7-amd64-kfreebsd-gcc]=debian-7-amd64-kfreebsd
			[debian-8-amd64-gcc]=debian-8-amd64
			[debian-8-amd64-kfreebsd-gcc]=debian-8-amd64-kfreebsd
			[dragonflybsd-4.0-amd64-gcc]=dragonflybsd-4.0-amd64
			[fedora-21-amd64-gcc]=fedora-21-amd64
			[fedora-23-amd64-gcc]=fedora-23-amd64
			[freebsd-10-amd64-gcc]=freebsd-10-amd64
#			[freebsd-10-amd64-clang]=freebsd-10-amd64
#			[freebsd-10-i386-gcc]=freebsd-10-i386
			[netbsd-6.1-i386-gcc]=netbsd-6.1-i386
			[omnios-amd64-gcc]=omnios-amd64
			[openbsd-5.6-i386-gcc]=openbsd-5.6-i386
			[openbsd-5.8-amd64-gcc]=openbsd-5.8-amd64
		)

declare -A lib_dirs=(
			[alpha]=alphaev4-unknown-linux-gnu
			[aarch64]=aarch64-linux-gnu
			[amd64-linux-ancientlibs]=amd64-linux-ancientlibs
			[android-clang]=x86_64-linux-android
			[android]=x86_64-linux-android
			[arm]=arm-linux-gnueabihf
			[dos]=dos
			[hppa]=hppa-linux-gnu
			[m68k]=m68k-linux-gnu
			[mips64el]=mips-unknown-linux-gnu
			[mips64]=mips-unknown-linux-gnu
			[mipsel]=mips-unknown-linux-gnu
			[mips]=mips-unknown-linux-gnu
			[omnios-amd64-gcc]=~/libs/
			[osx-clang64]=x86_64-apple-darwin15
			[ppc64le]=powerpc64le-linux-gnu
			[ppc]=powerpc-linux-gnu
			[s390x]=s390x-ibm-linux-gnu
			[sh4]=sh4-linux-gnu
#			[sparc64]=sparc-unknown-linux-gnu
#			[sparc7]=sparc-unknown-linux-gnu
			[sparc8]=sparc-unknown-linux-gnu
			[sparc9]=sparc-unknown-linux-gnu
			[ubuntu-15.10-amd64-gcc32]=i386-linux-gnu
#			[ubuntu-15.10-amd64-gccx32]=x86_64-linux-gnux32
			[ubuntu-15.10-amd64-musl]=x86_64-unknown-linux-musl
			[ubuntu-15.10-amd64-uclibc]=x86_64-unknown-linux-uclibc
			[win32]=i686-w64-mingw32
#			[win32-libusb0]=i686-w64-mingw32
			[win64]=x86_64-w64-mingw32
		)

# I almost lost my insanity trying to provide a single command for this.
# NetBSD and DargonFlyBSD are missing /sbin/ in its PATH for non-login shells, but the real problem is OpenBSD
# which is just completely broken and I could not find a way to append to its PATH without breaking the other OSes.
# So... let's make this configurable. The default is simply "halt -p" (which just works on OpenBSD).
# NB: the keys of the array are vmnames!
# See also, get_haltcmd_from_vmname()
declare -A halt_cmds=(
			[netbsd-6.1-i386]="/sbin/halt -p"
			[omnios-amd64-gcc]="shutdown -y -i5 -g0"
		)

# notable quirks:
# to get libftdi0 and libusb0 working on debian/kfreebsd 7 and 8 you need to install libusb2-dev and manually install
# libftdi-dev while breaking ignoring its dependencies because they conflict... works fine then.
# dpkg --force-depends -i libftdi-dev_0.20-1+b1_kfreebsd-amd64.deb
